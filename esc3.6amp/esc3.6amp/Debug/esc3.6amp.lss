
esc3.6amp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000616  000006aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800102  00800102  000006ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7a  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c7  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000594  00000000  00000000  00001b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00002130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b3  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024f  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000029c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	16 c1       	rjmp	.+556    	; 0x234 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	a6 c1       	rjmp	.+844    	; 0x360 <__vector_9>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e1       	ldi	r30, 0x16	; 22
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 32       	cpi	r26, 0x23	; 35
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	8b d1       	rcall	.+790    	; 0x37e <main>
  68:	d4 c2       	rjmp	.+1448   	; 0x612 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <setup>:
bool failsafe = true;


void setup(){	
	//dos canales controlados por interrupcion
	DDRC = (1<<DDC4)|(1<<PORTC0)|(1<<PORTC3)|(1<<PORTC1)|(1<<PORTC6);
  6c:	8b e5       	ldi	r24, 0x5B	; 91
  6e:	89 b9       	out	0x09, r24	; 9
	PUEB = (1<<PORTB6)|(1<<PORTB4);
  70:	80 e5       	ldi	r24, 0x50	; 80
  72:	87 b9       	out	0x07, r24	; 7
	PORTB = (1<<PORTB6)|(1<<PORTB4);
  74:	86 b9       	out	0x06, r24	; 6
	PORTC |= (1<<PORTC6);
  76:	56 9a       	sbi	0x0a, 6	; 10
	//DDRA = (1<<PORTA0)|(1<<PORTA1);
	//PORTA |= (1<<PORTA1);//robot encendido
	//selecciondecanales();
	//interrupciones pines externos canal1
	PCICR = (1<<PCIE0);
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK0 |= (1<<PCINT0)|(1<<PCINT1);//|(1<<PCINT4);//interrucpciones canales
  7e:	eb e6       	ldi	r30, 0x6B	; 107
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	83 60       	ori	r24, 0x03	; 3
  86:	80 83       	st	Z, r24
	//timer0 8 bit
	TCCR0A |= (1<<COM0A0)|(1<<COM0A1)|(1<<WGM00)|(1<<WGM01)|(1<<COM0B1)|(1<<COM0B0);
  88:	84 b5       	in	r24, 0x24	; 36
  8a:	83 6f       	ori	r24, 0xF3	; 243
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	81 60       	ori	r24, 0x01	; 1
  92:	85 bd       	out	0x25, r24	; 37

	TOCPMSA0 |= (1<<TOCC3S0);
  94:	e8 ee       	ldi	r30, 0xE8	; 232
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	
	TOCPMSA1 |= (1<<TOCC4S0);
  9e:	a9 ee       	ldi	r26, 0xE9	; 233
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	8c 91       	ld	r24, X
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8c 93       	st	X, r24
	
	TOCPMSA0 &= ~(1<<TOCC0S0);
  a8:	80 81       	ld	r24, Z
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	80 83       	st	Z, r24
	TOCPMSA0 &= ~(1<<TOCC1S0); 
  ae:	80 81       	ld	r24, Z
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	80 83       	st	Z, r24
	
	TOCPMCOE |= (1<<TOCC1OE);//motor a
  b4:	e2 ee       	ldi	r30, 0xE2	; 226
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	TOCPMCOE &= ~(1<<TOCC0OE);
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
	
	PORTC |=(1<<PORTC0);
  c4:	50 9a       	sbi	0x0a, 0	; 10
	PORTC |=(1<<PORTC1);
  c6:	51 9a       	sbi	0x0a, 1	; 10

	PORTC |=(1<<PORTC3);
  c8:	53 9a       	sbi	0x0a, 3	; 10
	PORTC |=(1<<PORTC4);
  ca:	54 9a       	sbi	0x0a, 4	; 10
		
	TOCPMCOE |= (1<<TOCC3OE);//motor b
  cc:	80 81       	ld	r24, Z
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	80 83       	st	Z, r24
	TOCPMCOE &= ~(1<<TOCC4OE);
  d2:	80 81       	ld	r24, Z
  d4:	8f 7e       	andi	r24, 0xEF	; 239
  d6:	80 83       	st	Z, r24
	
	OCR0A = 0x00;
  d8:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
  da:	18 bc       	out	0x28, r1	; 40
	//TIMER1 16 BIT TIEMPOS contador de rc
	TCCR1A = 0x00;
  dc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<WGM12)|(1<<CS11);//|(1<<CS10);
  e0:	8a e0       	ldi	r24, 0x0A	; 10
  e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	OCR1A = 0xFF00;//validador de rc checar failsafe
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	9f ef       	ldi	r25, 0xFF	; 255
  ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	//TIMSK1 = (1<<TOIE1)|(1<<OCIE1A);
	
	TCNT1 = 0x0000;
  f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//selecciondecanales();
	sei();
  fa:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f e7       	ldi	r18, 0x7F	; 127
  fe:	8a e1       	ldi	r24, 0x1A	; 26
 100:	96 e0       	ldi	r25, 0x06	; 6
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <setup+0x96>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <setup+0xa0>
 10c:	00 00       	nop
 10e:	2f e7       	ldi	r18, 0x7F	; 127
 110:	8a e1       	ldi	r24, 0x1A	; 26
 112:	96 e0       	ldi	r25, 0x06	; 6
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <setup+0xa8>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <setup+0xb2>
 11e:	00 00       	nop
 120:	2f e7       	ldi	r18, 0x7F	; 127
 122:	8a e1       	ldi	r24, 0x1A	; 26
 124:	96 e0       	ldi	r25, 0x06	; 6
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <setup+0xba>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <setup+0xc4>
 130:	00 00       	nop
 132:	2f e7       	ldi	r18, 0x7F	; 127
 134:	8a e1       	ldi	r24, 0x1A	; 26
 136:	96 e0       	ldi	r25, 0x06	; 6
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <setup+0xcc>
 140:	00 c0       	rjmp	.+0      	; 0x142 <setup+0xd6>
 142:	00 00       	nop
 144:	2f e7       	ldi	r18, 0x7F	; 127
 146:	8a e1       	ldi	r24, 0x1A	; 26
 148:	96 e0       	ldi	r25, 0x06	; 6
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <setup+0xde>
 152:	00 c0       	rjmp	.+0      	; 0x154 <setup+0xe8>
 154:	00 00       	nop
	_delay_ms(2000);
	_delay_ms(2000);
	_delay_ms(2000);
	_delay_ms(2000);
	_delay_ms(2000);
	giro_val = giro;
 156:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <giro>
 15a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <giro+0x1>
 15e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <giro_val+0x1>
 162:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <giro_val>
	filtro_giro = giro_val;
 166:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <giro_val>
 16a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <giro_val+0x1>
 16e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <filtro_giro+0x1>
 172:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <filtro_giro>
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	8a e1       	ldi	r24, 0x1A	; 26
 17a:	96 e0       	ldi	r25, 0x06	; 6
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <setup+0x110>
 184:	00 c0       	rjmp	.+0      	; 0x186 <setup+0x11a>
 186:	00 00       	nop
	_delay_ms(2000);
	accel_val = accel;
 188:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <accel>
 18c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <accel+0x1>
 190:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <accel_val+0x1>
 194:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <accel_val>
	filtro_accel = accel_val;
 198:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <accel_val>
 19c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <accel_val+0x1>
 1a0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <filtro_accel+0x1>
 1a4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <filtro_accel>
 1a8:	08 95       	ret

000001aa <pwmled>:
}
void pwmled(){
	if (TCNT0>=0&&primero){
 1aa:	86 b5       	in	r24, 0x26	; 38
 1ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <primero>
 1b0:	88 23       	and	r24, r24
 1b2:	c9 f1       	breq	.+114    	; 0x226 <pwmled+0x7c>
		//PORTC |= (1<<PORTC6);
		primero = false;
 1b4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <primero>
		ledpwm[0]++;
 1b8:	e7 e0       	ldi	r30, 0x07	; 7
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	80 81       	ld	r24, Z
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 83       	st	Z, r24
		if (segundo){
 1c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <segundo>
 1c6:	88 23       	and	r24, r24
 1c8:	11 f0       	breq	.+4      	; 0x1ce <pwmled+0x24>
			PORTC |= (1<<PORTC6);
 1ca:	56 9a       	sbi	0x0a, 6	; 10
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <pwmled+0x26>
			}else{
			PORTC &= ~(1<<PORTC6);
 1ce:	56 98       	cbi	0x0a, 6	; 10
		}
	}
	if (TCNT0>=ledpwm[0]&&!primero){
 1d0:	96 b5       	in	r25, 0x26	; 38
 1d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ledpwm>
 1d6:	98 17       	cp	r25, r24
 1d8:	70 f0       	brcs	.+28     	; 0x1f6 <pwmled+0x4c>
 1da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <primero>
 1de:	81 11       	cpse	r24, r1
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <pwmled+0x4c>
		//PORTC &= ~(1<<PORTC6);
		primero = true;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <primero>
		if (segundo){
 1e8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <segundo>
 1ec:	88 23       	and	r24, r24
 1ee:	11 f0       	breq	.+4      	; 0x1f4 <pwmled+0x4a>
			PORTC &= ~(1<<PORTC6);
 1f0:	56 98       	cbi	0x0a, 6	; 10
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <pwmled+0x4c>
			}else{
			PORTC |= (1<<PORTC6);
 1f4:	56 9a       	sbi	0x0a, 6	; 10
		}
	}
	if (ledpwm[0]==255&&tercero){
 1f6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ledpwm>
 1fa:	8f 3f       	cpi	r24, 0xFF	; 255
 1fc:	61 f4       	brne	.+24     	; 0x216 <pwmled+0x6c>
 1fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tercero>
 202:	88 23       	and	r24, r24
 204:	41 f0       	breq	.+16     	; 0x216 <pwmled+0x6c>
		segundo = !segundo;
 206:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <segundo>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	89 27       	eor	r24, r25
 20e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <segundo>
		tercero=false;
 212:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tercero>
	}
	if (ledpwm[0]==0){
 216:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ledpwm>
 21a:	81 11       	cpse	r24, r1
 21c:	0a c0       	rjmp	.+20     	; 0x232 <pwmled+0x88>
		tercero = true;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tercero>
	}
}
 224:	08 95       	ret
			PORTC |= (1<<PORTC6);
			}else{
			PORTC &= ~(1<<PORTC6);
		}
	}
	if (TCNT0>=ledpwm[0]&&!primero){
 226:	96 b5       	in	r25, 0x26	; 38
 228:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ledpwm>
 22c:	98 17       	cp	r25, r24
 22e:	c8 f6       	brcc	.-78     	; 0x1e2 <pwmled+0x38>
 230:	e2 cf       	rjmp	.-60     	; 0x1f6 <pwmled+0x4c>
 232:	08 95       	ret

00000234 <__vector_3>:
		tercero = true;
	}
}
//INTERRUPCIONES PARA LECTURA DE RC
//inputs canal 1 pa2, canal 2 pa3
ISR(PCINT0_vect){
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
//funciona de forma sincrona ESTA PARCHADO
if (!(PINA & 0x02)){
 246:	01 99       	sbic	0x00, 1	; 0
 248:	22 c0       	rjmp	.+68     	; 0x28e <__vector_3+0x5a>
	if (canal_1_valido){
 24a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <canal_1_valido>
 24e:	88 23       	and	r24, r24
 250:	b9 f1       	breq	.+110    	; 0x2c0 <__vector_3+0x8c>
		if(tiempo1< TCNT1)//ESTO ES UN PARCHE
 252:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 256:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 25a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tiempo1>
 25e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <tiempo1+0x1>
 262:	82 17       	cp	r24, r18
 264:	93 07       	cpc	r25, r19
 266:	70 f4       	brcc	.+28     	; 0x284 <__vector_3+0x50>
		giro = TCNT1 - tiempo1;//lectura 1
 268:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 26c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 270:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <tiempo1>
 274:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <tiempo1+0x1>
 278:	82 1b       	sub	r24, r18
 27a:	93 0b       	sbc	r25, r19
 27c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <giro+0x1>
 280:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <giro>
		canal_1_valido = false;
 284:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <canal_1_valido>
		failsafe  = false;
 288:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 28c:	19 c0       	rjmp	.+50     	; 0x2c0 <__vector_3+0x8c>
	}
} else{
	if (canal){
 28e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <canal>
 292:	88 23       	and	r24, r24
 294:	31 f0       	breq	.+12     	; 0x2a2 <__vector_3+0x6e>
		TCNT1 = 0x0000;
 296:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 29a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		canal = false;
 29e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <canal>
	}
	if (!canal_1_valido){
 2a2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <canal_1_valido>
 2a6:	81 11       	cpse	r24, r1
 2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <__vector_3+0x8c>
		tiempo1 = TCNT1;//lectura 2
 2aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 2ae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2b2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <tiempo1+0x1>
 2b6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tiempo1>
		canal_1_valido = true;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <canal_1_valido>
	}
}
//lectura 2
if (!(PINA & 0x01)){
 2c0:	00 99       	sbic	0x00, 0	; 0
 2c2:	21 c0       	rjmp	.+66     	; 0x306 <__stack+0x7>
	if (canal_2_valido){
 2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2c8:	88 23       	and	r24, r24
 2ca:	09 f4       	brne	.+2      	; 0x2ce <__vector_3+0x9a>
 2cc:	40 c0       	rjmp	.+128    	; 0x34e <__stack+0x4f>
		if(tiempo2< TCNT1)//ESTO ES UN PARCHE
 2ce:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 2d2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2d6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tiempo2>
 2da:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <tiempo2+0x1>
 2de:	82 17       	cp	r24, r18
 2e0:	93 07       	cpc	r25, r19
 2e2:	70 f4       	brcc	.+28     	; 0x300 <__stack+0x1>
		accel = TCNT1 - tiempo2;//lectura 1
 2e4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 2e8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2ec:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <tiempo2>
 2f0:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <tiempo2+0x1>
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
 2f8:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <accel+0x1>
 2fc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <accel>
		canal_2_valido = false;
 300:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 304:	24 c0       	rjmp	.+72     	; 0x34e <__stack+0x4f>
	}
	} else{
	if (canal){
 306:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <canal>
 30a:	88 23       	and	r24, r24
 30c:	31 f0       	breq	.+12     	; 0x31a <__stack+0x1b>
		TCNT1 = 0x0000;
 30e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 312:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		canal = false;
 316:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <canal>
	}
	if (!canal_2_valido){
 31a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 31e:	81 11       	cpse	r24, r1
 320:	0b c0       	rjmp	.+22     	; 0x338 <__stack+0x39>
		tiempo2 = TCNT1;//lectura 2
 322:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 326:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 32a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <tiempo2+0x1>
 32e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tiempo2>
		canal_2_valido = true;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
	//reset contador
	if (!(PINA & 0x02)&&!(PINA & 0x01)){
 338:	01 99       	sbic	0x00, 1	; 0
 33a:	09 c0       	rjmp	.+18     	; 0x34e <__stack+0x4f>
 33c:	00 99       	sbic	0x00, 0	; 0
 33e:	07 c0       	rjmp	.+14     	; 0x34e <__stack+0x4f>
		canal = true;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <canal>
		TCNT1 = 0x0000;
 346:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 34a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//if (!canal_3_valido){
		//tiempo3 = TCNT1;//lectura 2
		//canal_3_valido = true;
	//}
//}
}
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_9>:
//contador useg
ISR(TIMER1_COMPA_vect){
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	8f 93       	push	r24
	failsafe  = true;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 372:	8f 91       	pop	r24
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <main>:
int main(void){
	setup();
 37e:	76 de       	rcall	.-788    	; 0x6c <setup>
				{
					accel_val_2 = 510;
				}
			accel_val_2 = accel_val_2>>1;

			TOCPMCOE |= (1<<TOCC1OE);//motor a
 380:	c2 ee       	ldi	r28, 0xE2	; 226
 382:	d0 e0       	ldi	r29, 0x00	; 0
			OCR0A = accel_val_2;
			}else{
				accel_val_2=accel_val-accel_control;
				if (accel_val_2>510)
				{
					accel_val_2 = 510;
 384:	0e ef       	ldi	r16, 0xFE	; 254
 386:	11 e0       	ldi	r17, 0x01	; 1
	//PORTA &= ~(1<<PORTA1);
	while(1){
		//falta failsafe
	while(1){
		
			giro_control = giro;
 388:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <giro>
 38c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <giro+0x1>
 390:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <giro_control+0x1>
 394:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <giro_control>
			accel_control = accel;
 398:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <accel>
 39c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <accel+0x1>
 3a0:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <accel_control+0x1>
 3a4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <accel_control>
			
		if (giro_control >= giro_val){// sentido del volante
 3a8:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <giro_control>
 3ac:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <giro_control+0x1>
 3b0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <giro_val>
 3b4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <giro_val+0x1>
 3b8:	28 17       	cp	r18, r24
 3ba:	39 07       	cpc	r19, r25
 3bc:	58 f1       	brcs	.+86     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			giro_control = giro_control-giro_val;//offset
 3be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <giro_control>
 3c2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <giro_control+0x1>
 3c6:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <giro_val>
 3ca:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <giro_val+0x1>
 3ce:	82 1b       	sub	r24, r18
 3d0:	93 0b       	sbc	r25, r19
 3d2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <giro_control+0x1>
 3d6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <giro_control>
			accel_control_2 = accel_control - giro_control;//motor 1
 3da:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <accel_control>
 3de:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <accel_control+0x1>
 3e2:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <giro_control>
 3e6:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <giro_control+0x1>
 3ea:	82 1b       	sub	r24, r18
 3ec:	93 0b       	sbc	r25, r19
 3ee:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <accel_control_2+0x1>
 3f2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <accel_control_2>
			accel_control = accel_control + giro_control;//motor 1
 3f6:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <accel_control>
 3fa:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <accel_control+0x1>
 3fe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <giro_control>
 402:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <giro_control+0x1>
 406:	82 0f       	add	r24, r18
 408:	93 1f       	adc	r25, r19
 40a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <accel_control+0x1>
 40e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <accel_control>
 412:	2a c0       	rjmp	.+84     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			}else{
			giro_control = giro_val - giro_control;//offset
 414:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <giro_val>
 418:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <giro_val+0x1>
 41c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <giro_control>
 420:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <giro_control+0x1>
 424:	82 1b       	sub	r24, r18
 426:	93 0b       	sbc	r25, r19
 428:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <giro_control+0x1>
 42c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <giro_control>
			accel_control_2 = accel_control + giro_control;//motor 2
 430:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <accel_control>
 434:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <accel_control+0x1>
 438:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <giro_control>
 43c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <giro_control+0x1>
 440:	82 0f       	add	r24, r18
 442:	93 1f       	adc	r25, r19
 444:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <accel_control_2+0x1>
 448:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <accel_control_2>
			accel_control = accel_control - giro_control;//motor 2
 44c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <accel_control>
 450:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <accel_control+0x1>
 454:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <giro_control>
 458:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <giro_control+0x1>
 45c:	82 1b       	sub	r24, r18
 45e:	93 0b       	sbc	r25, r19
 460:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <accel_control+0x1>
 464:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <accel_control>
		}


//------------------------Motores
		if (accel_control>=accel_val){//MOTOR A
 468:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <accel_control>
 46c:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <accel_control+0x1>
 470:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <accel_val>
 474:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <accel_val+0x1>
 478:	28 17       	cp	r18, r24
 47a:	39 07       	cpc	r19, r25
 47c:	90 f1       	brcs	.+100    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>

			accel_val_2 = accel_control - accel_val;
 47e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <accel_control>
 482:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <accel_control+0x1>
 486:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <accel_val>
 48a:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <accel_val+0x1>
 48e:	82 1b       	sub	r24, r18
 490:	93 0b       	sbc	r25, r19
 492:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <accel_val_2+0x1>
 496:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <accel_val_2>
			if (accel_val_2>510)
 49a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <accel_val_2>
 49e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <accel_val_2+0x1>
 4a2:	8f 3f       	cpi	r24, 0xFF	; 255
 4a4:	91 40       	sbci	r25, 0x01	; 1
 4a6:	20 f0       	brcs	.+8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			{
				accel_val_2 = 510;
 4a8:	10 93 1c 01 	sts	0x011C, r17	; 0x80011c <accel_val_2+0x1>
 4ac:	00 93 1b 01 	sts	0x011B, r16	; 0x80011b <accel_val_2>
			}
			accel_val_2 = accel_val_2>>1;//
 4b0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <accel_val_2>
 4b4:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <accel_val_2+0x1>
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <accel_val_2+0x1>
 4c0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <accel_val_2>
			TOCPMCOE |= (1<<TOCC0OE);//motor a
 4c4:	88 81       	ld	r24, Y
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	88 83       	st	Y, r24
			TOCPMCOE &= ~(1<<TOCC1OE);
 4ca:	88 81       	ld	r24, Y
 4cc:	8d 7f       	andi	r24, 0xFD	; 253
 4ce:	88 83       	st	Y, r24
			TCCR0A |= (1<<COM0A0);
 4d0:	84 b5       	in	r24, 0x24	; 36
 4d2:	80 64       	ori	r24, 0x40	; 64
 4d4:	84 bd       	out	0x24, r24	; 36

			OCR0A = accel_val_2;
 4d6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <accel_val_2>
 4da:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <accel_val_2+0x1>
 4de:	87 bd       	out	0x27, r24	; 39
 4e0:	2e c0       	rjmp	.+92     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			}else{
				accel_val_2=accel_val-accel_control;
 4e2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <accel_val>
 4e6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <accel_val+0x1>
 4ea:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <accel_control>
 4ee:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <accel_control+0x1>
 4f2:	82 1b       	sub	r24, r18
 4f4:	93 0b       	sbc	r25, r19
 4f6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <accel_val_2+0x1>
 4fa:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <accel_val_2>
				if (accel_val_2>510)
 4fe:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <accel_val_2>
 502:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <accel_val_2+0x1>
 506:	8f 3f       	cpi	r24, 0xFF	; 255
 508:	91 40       	sbci	r25, 0x01	; 1
 50a:	20 f0       	brcs	.+8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
				{
					accel_val_2 = 510;
 50c:	10 93 1c 01 	sts	0x011C, r17	; 0x80011c <accel_val_2+0x1>
 510:	00 93 1b 01 	sts	0x011B, r16	; 0x80011b <accel_val_2>
				}
			accel_val_2 = accel_val_2>>1;
 514:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <accel_val_2>
 518:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <accel_val_2+0x1>
 51c:	96 95       	lsr	r25
 51e:	87 95       	ror	r24
 520:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <accel_val_2+0x1>
 524:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <accel_val_2>

			TOCPMCOE |= (1<<TOCC1OE);//motor a
 528:	88 81       	ld	r24, Y
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	88 83       	st	Y, r24
			TOCPMCOE &= ~(1<<TOCC0OE);
 52e:	88 81       	ld	r24, Y
 530:	8e 7f       	andi	r24, 0xFE	; 254
 532:	88 83       	st	Y, r24
			//TCCR0A &= ~(1<<COM0A0);			
			OCR0A = accel_val_2;
 534:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <accel_val_2>
 538:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <accel_val_2+0x1>
 53c:	87 bd       	out	0x27, r24	; 39
		}
		
		if (accel_control_2>=accel_val){//MOTOR B
 53e:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <accel_control_2>
 542:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <accel_control_2+0x1>
 546:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <accel_val>
 54a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <accel_val+0x1>
 54e:	28 17       	cp	r18, r24
 550:	39 07       	cpc	r19, r25
 552:	78 f1       	brcs	.+94     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			//PORTA &= ~(1<<PORTA1);//arm
			
			giro_val_2 = accel_control_2 - accel_val;
 554:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <accel_control_2>
 558:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <accel_control_2+0x1>
 55c:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <accel_val>
 560:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <accel_val+0x1>
 564:	82 1b       	sub	r24, r18
 566:	93 0b       	sbc	r25, r19
 568:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <giro_val_2+0x1>
 56c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <giro_val_2>
			if (giro_val_2>510)
 570:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <giro_val_2>
 574:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <giro_val_2+0x1>
 578:	8f 3f       	cpi	r24, 0xFF	; 255
 57a:	91 40       	sbci	r25, 0x01	; 1
 57c:	20 f0       	brcs	.+8      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
			{
				giro_val_2 = 510;
 57e:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <giro_val_2+0x1>
 582:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <giro_val_2>
			}
			giro_val_2 = giro_val_2>>1;
 586:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <giro_val_2>
 58a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <giro_val_2+0x1>
 58e:	96 95       	lsr	r25
 590:	87 95       	ror	r24
 592:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <giro_val_2+0x1>
 596:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <giro_val_2>
			TOCPMCOE |= (1<<TOCC3OE);//motor
 59a:	88 81       	ld	r24, Y
 59c:	88 60       	ori	r24, 0x08	; 8
 59e:	88 83       	st	Y, r24
			TOCPMCOE &= ~(1<<TOCC4OE);
 5a0:	88 81       	ld	r24, Y
 5a2:	8f 7e       	andi	r24, 0xEF	; 239
 5a4:	88 83       	st	Y, r24

			OCR0B = giro_val_2;
 5a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <giro_val_2>
 5aa:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <giro_val_2+0x1>
 5ae:	88 bd       	out	0x28, r24	; 40
 5b0:	2e c0       	rjmp	.+92     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
			}else{
			giro_val_2=accel_val-accel_control_2;
 5b2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <accel_val>
 5b6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <accel_val+0x1>
 5ba:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <accel_control_2>
 5be:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <accel_control_2+0x1>
 5c2:	82 1b       	sub	r24, r18
 5c4:	93 0b       	sbc	r25, r19
 5c6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <giro_val_2+0x1>
 5ca:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <giro_val_2>
			if (giro_val_2>510)
 5ce:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <giro_val_2>
 5d2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <giro_val_2+0x1>
 5d6:	8f 3f       	cpi	r24, 0xFF	; 255
 5d8:	91 40       	sbci	r25, 0x01	; 1
 5da:	20 f0       	brcs	.+8      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
			{
				giro = 510;
 5dc:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <giro+0x1>
 5e0:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <giro>
			}
			giro_val_2 = giro_val_2>>1;
 5e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <giro_val_2>
 5e8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <giro_val_2+0x1>
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <giro_val_2+0x1>
 5f4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <giro_val_2>

			TOCPMCOE |= (1<<TOCC4OE);//motor
 5f8:	88 81       	ld	r24, Y
 5fa:	80 61       	ori	r24, 0x10	; 16
 5fc:	88 83       	st	Y, r24
			TOCPMCOE &= ~(1<<TOCC3OE);
 5fe:	88 81       	ld	r24, Y
 600:	87 7f       	andi	r24, 0xF7	; 247
 602:	88 83       	st	Y, r24
			//TCCR0A &= ~(1<<COM0A0);
			OCR0B = giro_val_2;
 604:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <giro_val_2>
 608:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <giro_val_2+0x1>
 60c:	88 bd       	out	0x28, r24	; 40
		}	
		pwmled();
 60e:	cd dd       	rcall	.-1126   	; 0x1aa <pwmled>
		}//arm
 610:	bb ce       	rjmp	.-650    	; 0x388 <main+0xa>

00000612 <_exit>:
 612:	f8 94       	cli

00000614 <__stop_program>:
 614:	ff cf       	rjmp	.-2      	; 0x614 <__stop_program>
